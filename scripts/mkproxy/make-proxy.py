import os, sys, re, subprocess, time, datetime, json, argparse, socket, base64
import SimpleHTTPServer, SocketServer
from distutils.spawn import find_executable
from string import Template

def version ():
    major = 0
    minor = 3
    build = 21
    ver = [str(major), str(minor), str(build)]
    return '.'.join(ver)

def create_assets(dst):
    dct = [
        ('index.html', "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KPGhlYWQ+CiAgICA8bWV0YSBjaGFyc2V0PSJVVEYtOCI+CiAgICA8dGl0bGU+bWFrZSBwcm94eTwvdGl0bGU+CiAgICA8bWV0YSBuYW1lPXZpZXdwb3J0IGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAsIG1pbmltdW0tc2NhbGU9MC41IG1heGltdW0tc2NhbGU9MS4wIj4KICAgIDxzY3JpcHQgc3JjPSJ6ZXB0by5taW4uanMiPjwvc2NyaXB0PgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJzdHlsZS5jc3MiPgo8L2hlYWQ+Cjxib2R5PgogICAgPGRpdiBjbGFzcz0icGciPgogICAgICAgIDxkaXYgaWQ9InByb2dyZXNzIiBjbGFzcz0icHJvZ3Jlc3MiPjwvZGl2PgogICAgICAgIDxoMT5NYWtlIFByb3h5IDxzcGFuIGlkPSJ2ZXJzaW9uIj48L3NwYW4+PC9oMT4KICAgICAgICA8aDI+RkZNUEVHIENvbmZpZ3VyYXRpb248L2gyPgogICAgICAgIDxkaXYgaWQ9Im1haW4iIGNsYXNzPSJtYWluIj48L2Rpdj4KICAgICAgICA8YSBocmVmPSIjbG9hZF9sb2ciIGlkPSJsb2FkX2xvZyIgY2xhc3M9ImxvZy12aWV3Ij5WaWV3IGxvZyBmaWxlPC9hPgogICAgICAgIDxkaXYgY2xhc3M9ImxvZyIgaWQ9ImxvZy1jb250YWluZXIiPgogICAgICAgICAgICA8aDI+Q3VycmVudCBsb2cgZmlsZTwvaDI+CiAgICAgICAgICAgIDxkaXYgaWQ9IndvcmtlcnMiIGNsYXNzPSJ3b3JrZXJzIj48L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibG9nLWhlYWRlciI+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9nLWNlbGwgbG9nLXR5cGUiIHRpdGxlPSIiPlRZUEU8L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9nLWNlbGwgbG9nLXdvcmtlciIgdGl0bGU9IiI+V09SS0VSPC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvZy1jZWxsIGxvZy1kZXNjIiB0aXRsZT0iIj5ERVNDUklQVElPTjwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJsb2ctY2VsbCBsb2ctdmFsdWUiIHRpdGxlPSIiPlZBTFVFPC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxvZy1jZWxsIGxvZy1leHRyYSIgdGl0bGU9IiI+RVhUUkE8L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibG9nLWNlbGwgbG9nLXRpbWUiIHRpdGxlPSIiPlRJTUU8L3NwYW4+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGlkPSJsb2ciIGNsYXNzPSJsb2ctY29udGVudCI+TG9hZGluZyAuLi48L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPHNjcmlwdCBzcmM9Im1haW4uanMiPjwvc2NyaXB0Pgo8L2JvZHk+CjwvaHRtbD4="),
        ('style.css', "Ym9keSB7CiAgICBtYXJnaW46IDA7CiAgICBwYWRkaW5nOiAwOwogICAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7CiAgICBmb250LXNpemU6IDE0cHg7Cn0KLnBnIHsKICAgIG1heC13aWR0aDogMTAyNHB4OwogICAgbWFyZ2luOiAwIGF1dG87CiAgICBkaXNwbGF5OiBibG9jazsKfQoubWFpbiB7CiAgICBwYWRkaW5nOiAxMHB4Owp9Ci5yb3cgewogICAgZGlzcGxheTogYmxvY2s7CiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2NjYzsKICAgIHBhZGRpbmc6IDJweCAwOwp9Ci5yb3cgLm5hbWUgewogICAgd2lkdGg6IDMwJTsKfQoucm93IC52YWx1ZSB7CiAgICB3aWR0aDogNjklOwp9Ci5jb2wgewogICAgZGlzcGxheTogaW5saW5lLWJsb2NrOwp9Ci5sb2cgewogICAgZGlzcGxheTogbm9uZTsKICAgIHdpZHRoOiAxMDAlOwogICAgLyptYXgtaGVpZ2h0OiA1MDBweDsqLwogICAgLypvdmVyZmxvdzogYXV0bzsqLwogICAgLypib3JkZXI6IDFweCBzb2xpZDsqLwogICAgcG9zaXRpb246IHJlbGF0aXZlOwogICAgLypwYWRkaW5nOiA1cHg7Ki8KICAgIC8qbWFyZ2luOiA1cHg7Ki8KfQoubG9nLnNob3ctbG9nIHsgZGlzcGxheTogYmxvY2s7IH0KLmxvZy1oZWFkZXIgewogICAgYmFja2dyb3VuZDogYmxhY2s7CiAgICBjb2xvcjogd2hpdGU7CiAgICB3aWR0aDogMTAwJTsKICAgIGRpc3BsYXk6IGJsb2NrOwp9Ci5sb2ctY2VsbCB7CiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgICBtYXJnaW46IDAgMTBweCAwIDA7CiAgICBwYWRkaW5nOiAycHggMTBweDsKICAgIGZvbnQtc2l6ZTogMTJweDsKICAgIC8qbWluLXdpZHRoOiA2MHB4OyovCiAgICAvKm1heC13aWR0aDogMTYwcHg7Ki8KICAgIG92ZXJmbG93OmhpZGRlbjsKICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzOwogICAgd2hpdGUtc3BhY2U6IG5vd3JhcDsKICAgIAp9Ci5wcm9ncmVzcyB7CiAgICBiYWNrZ3JvdW5kOiAjY2NjOwogICAgcG9zaXRpb246IGZpeGVkOwogICAgdG9wOiAwOwogICAgcmlnaHQ6IDA7CiAgICBsZWZ0OiAwOwp9Ci5iYXIgewogICAgZGlzcGxheTogYmxvY2s7CiAgICBiYWNrZ3JvdW5kOiByZWQ7CiAgICB0ZXh0LWFsaWduOiByaWdodDsKfQouYmFyIGVtIHsKICAgIGZvbnQtc2l6ZTogMTBweDsKICAgIGZvbnQtd2VpZ2h0OiBib2xkOwogICAgZm9udC1zdHlsZTogbm9ybWFsOwogICAgcGFkZGluZzogMnB4IDVweDsKICAgIGRpc3BsYXk6IGJsb2NrOwp9Ci5mYWlsIHsgYmFja2dyb3VuZDogcmVkOyB9Ci5pbmZvIHsgYmFja2dyb3VuZDogbGlnaHRibHVlOyB9Ci5maW5pc2ggeyBiYWNrZ3JvdW5kOiBsaWdodGdyYXk7IH0KLndvcmtlciB7IGJhY2tncm91bmQ6IHBhbGVncmVlbjsgfQovKi5sb2ctZXh0cmEgeyBkaXNwbGF5OiBub25lOyB9Ki8KLmxvZy10eXBlIHsgd2lkdGg6IDUwcHg7IH0KLmxvZy13b3JrZXIgeyB3aWR0aDogNjBweDsgfQoubG9nLWRlc2MsIC5sb2ctdmFsdWUgewogICAgd2lkdGg6IDEzMHB4Owp9Ci5sb2ctdmlldyB7CiAgICBkaXNwbGF5OiBibG9jazsKfQoubG9nLWV4dHJhIHsKICAgIHdpZHRoOiAxNTBweDsKfQoud29ya19yb3cgewogICAgZGlzcGxheTogaW5saW5lLWJsb2NrOwp9Ci53b3JrX3JvdyBiLAoud29ya19yb3cgaSB7CiAgICBtYXJnaW46IDAgNXB4IDAgMAp9Ci53b3JrZXJzIHsKICAgIHBhZGRpbmc6IDVweDsKICAgIGRpc3BsYXk6IGJsb2NrOwp9Cgouc3RhdHVzIHsKICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7CiAgICBmb250LXN0eWxlOiBub3JtYWw7CiAgICBwYWRkaW5nOiAxcHggNXB4OwogICAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICBmb250LXNpemU6IDAuOGVtOwp9Ci5zdGF0dXMtZ29vZCB7IGJhY2tncm91bmQ6IGRlZXBza3libHVlOyB9Ci5zdGF0dXMtbWVkaXVtIHsgYmFja2dyb3VuZDogbGlnaHRncmVlbjsgfQouc3RhdHVzLXNsb3cgeyBiYWNrZ3JvdW5kOiBsaWdodGNvcmFsOyB9Ci5zdGF0dXMtd2FybmluZyB7IGJhY2tncm91bmQ6IG1lZGl1bXB1cnBsZSB9Ci5zdGF0dXMtaW5hY3RpdmUgeyBiYWNrZ3JvdW5kOiBibGFjazsgY29sb3I6IHdoaXRlOyB9"),
        ('zepto.min.js', ""),
        ('main.js', 'KGZ1bmN0aW9uKCQpewogICAgU3RyaW5nLnByb3RvdHlwZS5oYXNoQ29kZSA9IGZ1bmN0aW9uKCkgewogICAgICAgIHZhciBoYXNoID0gMCwgaSwgY2hyLCBsZW47CiAgICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gaGFzaDsKICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSB0aGlzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7CiAgICAgICAgICAgIGNociAgID0gdGhpcy5jaGFyQ29kZUF0KGkpOwogICAgICAgICAgICBoYXNoICA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpICsgY2hyOwogICAgICAgICAgICBoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlcgogICAgICAgIH0KICAgICAgICByZXR1cm4gaGFzaDsKICAgIH07CiAgICB2YXIgbWFpbiA9ICQoJyNtYWluJyksCiAgICAgICAgcHJvZ3Jlc3MgPSAkKCcjcHJvZ3Jlc3MnKSwKICAgICAgICB3b3JrZXJzID0gJCgnI3dvcmtlcnMnKSwKICAgICAgICBsb2cgPSAkKCcjbG9nJyksCiAgICAgICAgd29ya19kY3QgPSB7fSwKICAgICAgICBsb2dfZmlsZW5hbWUgPSBudWxsLAogICAgICAgIGxvZ190ZW1wbGF0ZSA9ICc8c3BhbiBjbGFzcz0iOkNMQVNTTkFNRToiIHRpdGxlPSI6QUxUOiI+OlRFWFQ6PC9zcGFuPicsCiAgICAgICAgdmlldyA9IGZ1bmN0aW9uKGh0bWwpIHsKICAgICAgICAgICAgbWFpbi5odG1sKGh0bWwpCiAgICAgICAgfSwKICAgICAgICBnZXRfd29ya19yYXRlID0gZnVuY3Rpb24gKG9iaikgewogICAgICAgICAgICB2YXIgaHRtbCA9IFtdCiAgICAgICAgICAgICQuZWFjaChvYmosIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkgewogICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhuYW1lLCB2YWx1ZSkKICAgICAgICAgICAgICAgIGh0bWwucHVzaCgnPGRpdiBjbGFzcz0id29ya19yb3ciPjxiPicrIG5hbWUgKyc8L2I+PGk+JysgdmFsdWUgKyc8L2k+PC9kaXY+JykKICAgICAgICAgICAgfSkKICAgICAgICAgICAgcmV0dXJuIGh0bWwuam9pbignJykKICAgICAgICB9LAogICAgICAgIGdldF90aW1lX2ZtdCA9IGZ1bmN0aW9uIChtaWxsaXNlY29uZHMsIGxpbWl0KSB7CiAgICAgICAgICAgIGlmKC9eWzAtOV0rXC5bMC05XSskLy50ZXN0KFN0cmluZyhtaWxsaXNlY29uZHMpKSkgewogICAgICAgICAgICAgICAgbWlsbGlzZWNvbmRzICo9IDEwMDA7IC8vIHB5dGhvbiBtaWdodCB1c2Ugc2Vjb25kcwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBpID0gMDsKICAgICAgICAgICAgdmFyIG1zID0gbWlsbGlzZWNvbmRzOwogICAgICAgICAgICB2YXIgZm10ID0gWydzZWMnLCAnbWluJywgJ2hyJywgJ2RheScsICd3ZWVrJywgJ21vbnRoJywgJ3llYXInLCAnZGVjYWRlJywgJ2NlbXR1cnknXTsKICAgICAgICAgICAgdmFyIG1vZCA9IFsxMDAwLCA2MCwgNjAsIDI0LCA3LCA0LCAxMiwgMTAsIDEwMCwgMV07CiAgICAgICAgICAgIHZhciBwbHVyYWwgPSBudWxsOwoKICAgICAgICAgICAgZm9yKGk7IGkgPCBmbXQubGVuZ3RoLTE7IGkrKykgewogICAgICAgICAgICAgICAgbXMgLz0gbW9kW2ldOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2cobXMsIGZtdFtpXSkKICAgICAgICAgICAgICAgIGlmIChsaW1pdCAmJiBsaW1pdCA9PT0gZm10W2ldKSB7IGJyZWFrOyB9CiAgICAgICAgICAgICAgICBpZiAocGFyc2VJbnQobXMvbW9kW2krMV0sIDEwKSA9PSAwKSB7IGJyZWFrOyB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHBsdXJhbCA9IChtcyA+IDEgPyAncycgOiAnJyk7CiAgICAgICAgICAgIHJldHVybiBbCiAgICAgICAgICAgICAgICBTdHJpbmcoaSA+IDIgPyBtcy50b0ZpeGVkKDIpIDogcGFyc2VJbnQobXMsIDEwKSkucmVwbGFjZSgvXC5bMF0rJC8sICcnKSwKICAgICAgICAgICAgICAgIGZtdFtpXSArIHBsdXJhbAogICAgICAgICAgICBdLmpvaW4oJyAnKTsKCiAgICAgICAgfSwKICAgICAgICBnZXRfbm9kZV9zdGF0dXMgPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHsKICAgICAgICAgICAgY29uc29sZS5sb2codmFsdWUsIHZhbHVlLnNwbGl0KCdAJykpOwogICAgICAgICAgICB2YXIgYXJyYXkgPSB2YWx1ZS5zcGxpdCgnQCcpOwogICAgICAgICAgICB2YXIgaXAgPSBhcnJheVswXTsKICAgICAgICAgICAgdmFyIHRzID0gYXJyYXlbMV07CiAgICAgICAgICAgIHZhciBkaWZmID0gMAogICAgICAgICAgICBpZiAoIS9eWzAtOV0rJC8udGVzdCh0cykpIHsgcmV0dXJuIHZhbHVlOyB9CiAgICAgICAgICAgIHRzID0gcGFyc2VJbnQodHMsIDEwKSAqIDEwMDAKICAgICAgICAgICAgZGlmZiA9IChwYXJzZUludChuZXcgRGF0ZSgpLnZhbHVlT2YoKSwgMTApIC0gdHMpLzEwMDA7CiAgICAgICAgICAgIGNsYXNzbmFtZSA9IGRpZmYgPCAoNSo2MCoxMDAwKSA/ICdnb29kJyA6CiAgICAgICAgICAgICAgICAgICAgICAgIGRpZmYgPCAoMTUqNjAqMTAwMCkgPyAnbWVkaXVtJyA6ICAKICAgICAgICAgICAgICAgICAgICAgICAgZGlmZiA8ICgzMCo2MCoxMDAwKSA/ICdzbG93JyA6ICAKICAgICAgICAgICAgICAgICAgICAgICAgZGlmZiA8ICg2MCo2MCoxMDAwKSA/ICd3YXJuaW5nJyA6CiAgICAgICAgICAgICAgICAgICAgICAgICdpbmFjdGl2ZSc7CgogICAgICAgICAgICBjb25zb2xlLmxvZygnZGlmZicsIGRpZmYsIHR5cGVvZiB0cykKICAgICAgICAgICAgcmV0dXJuIHZhbHVlICsgJyA8ZW0gY2xhc3M9InN0YXR1cyBzdGF0dXMtJyArIGNsYXNzbmFtZSArICciPicgKyBnZXRfdGltZV9mbXQoZGlmZikgKyAnPC9lbT4nOwogICAgICAgIH0sCiAgICAgICAgdHN2X3RvX2h0bWwgPSBmdW5jdGlvbiAocm93KSB7CiAgICAgICAgICAgIGlmICghcm93LnRyaW0oKSkgeyByZXR1cm4gJyc7IH0KICAgICAgICAgICAgcm93ID0gcm93LnRyaW0oKS5zcGxpdCgnXHQnKQogICAgICAgICAgICBpZiAocm93Lmxlbmd0aCA8IDQpIHsgcmV0dXJuICcnOyB9CgogICAgICAgICAgICB2YXIgZGlmZgogICAgICAgICAgICB2YXIgd29ya19pZCA9IHJvd1sxXS50b0xvd2VyQ2FzZSgpLnRyaW0oKQogICAgICAgICAgICB2YXIgd29ya190eXBlID0gKHJvd1syXS5tYXRjaCgvXihmaW5pc2h8c3RhcnQpL2kpIHx8IFsnJ10pWzBdLnRvTG93ZXJDYXNlKCkKCiAgICAgICAgICAgIHZhciBjbGFzc25hbWVzID0gWwogICAgICAgICAgICAgICAgcm93WzBdLnRvTG93ZXJDYXNlKCkudHJpbSgpLAogICAgICAgICAgICAgICAgcm93WzFdLnRvTG93ZXJDYXNlKCkudHJpbSgpLAogICAgICAgICAgICAgICAgd29ya190eXBlLAogICAgICAgICAgICBdLmpvaW4oJyAnKQoKICAgICAgICAgICAgaWYgKHdvcmtfdHlwZSAmJiAvXmZpbmlzaC9pLnRlc3Qod29ya190eXBlKSkgewogICAgICAgICAgICAgICAgd29ya19kY3QgPSB3b3JrX2RjdCB8fCB7fQogICAgICAgICAgICAgICAgd29ya19kY3Rbd29ya19pZF0gPSB3b3JrX2RjdFt3b3JrX2lkXSB8fCAwCiAgICAgICAgICAgICAgICB3b3JrX2RjdFt3b3JrX2lkXSArPSAxCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJvd1swXSA9IGxvZ190ZW1wbGF0ZS5yZXBsYWNlKCc6VEVYVDonLCByb3dbMF0pLnJlcGxhY2UoJzpDTEFTU05BTUU6JywgJ2xvZy1jZWxsIGxvZy10eXBlJykucmVwbGFjZSgnOkFMVDonLCAnJykKICAgICAgICAgICAgcm93WzFdID0gbG9nX3RlbXBsYXRlLnJlcGxhY2UoJzpURVhUOicsIHJvd1sxXSkucmVwbGFjZSgnOkNMQVNTTkFNRTonLCAnbG9nLWNlbGwgbG9nLXdvcmtlcicpLnJlcGxhY2UoJzpBTFQ6JywgJycpCiAgICAgICAgICAgIHJvd1syXSA9IGxvZ190ZW1wbGF0ZS5yZXBsYWNlKCc6VEVYVDonLCByb3dbMl0pLnJlcGxhY2UoJzpDTEFTU05BTUU6JywgJ2xvZy1jZWxsIGxvZy1kZXNjJykucmVwbGFjZSgnOkFMVDonLCAnJykKICAgICAgICAgICAgcm93WzNdID0gbG9nX3RlbXBsYXRlLnJlcGxhY2UoJzpURVhUOicsIHJvd1szXS5zcGxpdCgvW1wvXFxdLykuc2xpY2UoLTEpLmpvaW4oJy8nKSkucmVwbGFjZSgnOkNMQVNTTkFNRTonLCAnbG9nLWNlbGwgbG9nLXZhbHVlJykucmVwbGFjZSgnOkFMVDonLCByb3dbM10pCiAgICAgICAgICAgIHJvd1s0XSA9IGxvZ190ZW1wbGF0ZS5yZXBsYWNlKCc6VEVYVDonLCByb3dbNF0gfHwgJycpLnJlcGxhY2UoJzpDTEFTU05BTUU6JywgJ2xvZy1jZWxsIGxvZy1leHRyYScpLnJlcGxhY2UoJzpBTFQ6JywgJycpCiAgICAgICAgICAgIHJvd1s1XSA9IGxvZ190ZW1wbGF0ZS5yZXBsYWNlKCc6VEVYVDonLCByb3dbNV0gJiYgcm93WzVdLnNwbGl0KCcgJylbMV0gfHwgJycpLnJlcGxhY2UoJzpDTEFTU05BTUU6JywgJ2xvZy1jZWxsIGxvZy10aW1lJykucmVwbGFjZSgnOkFMVDonLCByb3dbNV0pCgogICAgICAgICAgICByZXR1cm4gJzxkaXYgY2xhc3M9ImxvZy1yb3cgJyArIGNsYXNzbmFtZXMgKyAnIj4nICsgcm93LmpvaW4oJycpICsgJzwvZGl2PicKCiAgICAgICAgfSwKICAgICAgICBnZXRfbG9nID0gbnVsbCwKICAgICAgICBnZXRfbG9nX2ZpbGUgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciBhcnJheSA9IG51bGwsCiAgICAgICAgICAgICAgICBwYXJ0aWFsLAogICAgICAgICAgICAgICAgaHRtbCA9ICcnLAogICAgICAgICAgICAgICAgcGFyc2UgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgJC5nZXQobG9nX2ZpbGVuYW1lLCBmdW5jdGlvbiAodHh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5ID0gdHh0LnNwbGl0KCdcbicpCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gYXJyYXkubGVuZ3RoIC0gMSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdzsKCiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3cgPSBhcnJheVtuXS50cmltKCkgfHwgJyc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocm93KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbCArPSB0c3ZfdG9faHRtbChyb3cpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuIC09IDEKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgbG9nLmh0bWwoaHRtbCkKICAgICAgICAgICAgICAgICAgICAgICAgd29ya2Vycy5odG1sKGdldF93b3JrX3JhdGUod29ya19kY3QpKTsKICAgICAgICAgICAgICAgICAgICAgICAgd29ya19kY3QgPSBudWxsOwogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICByZXR1cm4gc2V0VGltZW91dChwYXJzZSwgMCk7CiAgICAgICAgfSwKICAgICAgICBnZXRfY29uZmlnX3JvdyA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkgewogICAgICAgICAgICB2YXIgaXNfbm9kZV93b3JrZXIgPSAvXm5vZGUvaS50ZXN0KG5hbWUpCiAgICAgICAgICAgIHZhbHVlID0gU3RyaW5nKHZhbHVlIHx8ICcnKS50cmltKCkKICAgICAgICAgICAgdmFsdWUgPSBpc19ub2RlX3dvcmtlciA/IGdldF9ub2RlX3N0YXR1cyhuYW1lLCB2YWx1ZSkgOiB2YWx1ZS50cmltKCkKICAgICAgICAgICAgcmV0dXJuIFsKICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPSJyb3ciPicsCiAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9ImNvbCBuYW1lIj4nLAogICAgICAgICAgICAgICAgICAgICAgICBuYW1lLAogICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nLAogICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPSJjb2wgdmFsdWUiPicsCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLAogICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nLAogICAgICAgICAgICAgICAgJzwvZGl2PicKICAgICAgICAgICAgXS5qb2luKCdcbicpOwogICAgICAgIH0sCiAgICAgICAgZGF0ZV9zdHJpbmcgPSBmdW5jdGlvbiAoZCkgewogICAgICAgICAgICBkID0gIWQgPyBuZXcgRGF0ZSgpIDogbmV3IERhdGUoZCkKICAgICAgICAgICAgZCA9IGQudG9TdHJpbmcoKS5zcGxpdCgnICcpLnNsaWNlKDAsNSkKICAgICAgICAgICAgcmV0dXJuIGQuam9pbignICcpCiAgICAgICAgfSwKICAgICAgICBub3cgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSgpLnZhbHVlT2YoKTsKICAgICAgICB9LAogICAgICAgIGNvbmZpZ19kYXRlcyA9IHt9LAogICAgICAgIHBvbGxfcHJldmlvdXMgPSBudWxsLAogICAgICAgIHBvbGxfc2VydmVyID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAkLmdldEpTT04oJ2NvbmZpZy5qc29uJywgZnVuY3Rpb24oZCl7CiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGQpOwogICAgICAgICAgICAgICAgdmFyIHRleHQgPSBbXSwKICAgICAgICAgICAgICAgICAgICBwZXJjZW50ID0gMCwKICAgICAgICAgICAgICAgICAgICBrZXlzID0gW10sCiAgICAgICAgICAgICAgICAgICAgaGFzaCA9IChKU09OLnN0cmluZ2lmeShkKSkuaGFzaENvZGUoKTsKCiAgICAgICAgICAgICAgICBpZiAoaGFzaCA9PT0gcG9sbF9wcmV2aW91cykgewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJOb3RoaW5nIHRvIGRvIC4uLiIpOwogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHBvbGxfcHJldmlvdXMgPSBoYXNoOwoKICAgICAgICAgICAgICAgIGlmIChnZXRfbG9nKSB7IGdldF9sb2dfZmlsZSgpOyB9CgoKICAgICAgICAgICAgICAgICQoZCkuZWFjaChmdW5jdGlvbihrZXksIG9iail7CiAgICAgICAgICAgICAgICAgICAgbG9nX2ZpbGVuYW1lID0gbG9nX2ZpbGVuYW1lIHx8IG9iai5sb2dfZmlsZW5hbWU7CiAgICAgICAgICAgICAgICAgICAgb2JqWydkYXRlX25vdyddID0gZGF0ZV9zdHJpbmcoKQogICAgICAgICAgICAgICAgICAgICQuZWFjaChvYmosIGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkgewogICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhuYW1lLCB2YWx1ZSkKICAgICAgICAgICAgICAgICAgICAgICAgcGVyY2VudCA9IChvYmoudG90YWxfcHJvZ3Jlc3MgLyBvYmoudG90YWxfZmlsZXMpICogMTAwCgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoL15kYXRlL2kudGVzdChuYW1lKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqW25hbWVdID0gZGF0ZV9zdHJpbmcodmFsdWUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWdfZGF0ZXNbbmFtZV0gPSBwYXJzZUludChuZXcgRGF0ZSh2YWx1ZSkudmFsdWVPZigpLCAxMCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEvXmRzdHxzcmN8d29yay9pLnRlc3QobmFtZSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleXMucHVzaChuYW1lKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgICQuZWFjaChrZXlzLnNvcnQoKSwgZnVuY3Rpb24gKGksIHZhbCkgewogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0LnB1c2goZ2V0X2NvbmZpZ19yb3codmFsLCBvYmpbdmFsXSkpCiAgICAgICAgICAgICAgICAgICAgfSkKCgogICAgICAgICAgICAgICAgICAgIC8vIHRleHQucHVzaChnZXRfY29uZmlnX3Jvdygnbm93Jywgbm93KCkpKQogICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUuY2xlYXIoKQogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKG5vdygpKQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIHByb2dyZXNzLmh0bWwoJzxkaXYgY2xhc3M9ImJhciIgc3R5bGU9IndpZHRoOicgKyBwZXJjZW50ICsgJyUiPjxlbT4nICsgcGFyc2VJbnQocGVyY2VudCwxMCkgKyAnJTwvZW0+PC9kaXY+JykKICAgICAgICAgICAgICAgIHZpZXcodGV4dC5qb2luKCdcbicpKQogICAgICAgICAgICB9KTsKICAgICAgICB9OwogICAgcG9sbF9zZXJ2ZXIoKTsKICAgIHNldEludGVydmFsKHBvbGxfc2VydmVyLCAxNTAwMCk7CgogICAgdmFyIGxvZ0NvbnRhaW5lciA9ICQoJyNsb2ctY29udGFpbmVyJyk7CiAgICAkKCcjbG9hZF9sb2cnKS5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkgewogICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICBsb2dDb250YWluZXIudG9nZ2xlQ2xhc3MoJ3Nob3ctbG9nJyk7CiAgICAgICAgZ2V0X2xvZyA9IGxvZ0NvbnRhaW5lci5oYXNDbGFzcygnc2hvdy1sb2cnKSAvLyBnbG9iYWwgc3dpdGNoCiAgICAgICAgaWYgKCFnZXRfbG9nKSB7CiAgICAgICAgICAgIC8vIGhpZGUgYW5kIGVtcHR5IGNvbnRlbnRzCiAgICAgICAgICAgIGxvZy5odG1sKCdMb2FkaW5nIC4uLi4nKTsKICAgICAgICAgICAgJCh0aGlzKS5odG1sKCdWaWV3IGxvZyBmaWxlJyk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgICQodGhpcykuaHRtbCgnSGlkZSBsb2cgZmlsZScpOwogICAgICAgIHJldHVybiBnZXRfbG9nX2ZpbGUoKTsKCiAgICB9KTsKfShaZXB0bykp')
    ]
    output = dst + get_prefix()
    for asset in dct:
        # unpack and write the asset to the asset folder
        filename, b64string = (asset)
        b64string = base64.b64decode(b64string)
        open(output + filename, 'w').write(b64string)
    
    os.chdir(output)
    PORT = 8000

    Handler = SimpleHTTPServer.SimpleHTTPRequestHandler
    httpd = SocketServer.TCPServer(("", PORT), Handler)
    print "serving at port", PORT
    httpd.serve_forever()


def banner():
    print "\nM A K E - P R O X Y (version:%s)\n\n" % version()

def cls(n=None):
    # os specific "clear"
    # or line feeds
    method = 'cls' if os.name == 'nt' else 'clear'
    if n == None or n < 1:
        os.system(method)
        banner()
        return
    print "\n"*n

def slash():
    delim = "\\" if os.name == 'nt' else "/"
    return delim

def folder_fix(path, char=None):
    # if char == None: char = slash()
    # if char == '\\': char += char #regex escape "\"
    char = "|"
    path = path.replace(r'[\r]', '').strip()
    fix_path = path or ''
    fix_path = fix_path.replace('\\', char)
    fix_path = fix_path.replace('/', char)

    fix_path = fix_path.replace('||', '|')
    fix_path = fix_path.replace('|', slash())


    return fix_path

def tsv(type='NONE', desc="No description", value=" ", extra=" "):
    who = config('worker') or 'UNKOWN'
    ts = now()
    return '\t'.join([type.ljust(8), who, str(desc), str(value), (extra), ts])

def sizeof_fmt(num, suffix='B'):
    for unit in ['','K','M','G','T','P','E','Z']:
        if abs(num) < 1024.0:
            return "%3.2f %s%s" % (num, unit, suffix)
        num /= 1024.0
    return "%.1f%s%s" % (num, 'Yi', suffix)

def now(style='%Y/%m/%d %H:%M:%S'):
    
    if style == 'epoc':
        # javascript uses millisecons
        return str(int(time.time()*1000.0))
    if style == 'time': style = '%H:%M:%S'
    if style == 'microsecond': style = '%H:%M:%S.%f'
    if style == 'filename': style = '%Y%m%d_%H%M%S'
    return str(datetime.datetime.now().strftime(style))



# the FFMPEG parameters
def get_ffmpeg_command(input_filename, output_filename):
    global which_ffmpeg

    command = []
    command += ['"%s"' % which_ffmpeg]
    command += ['-i', '"%s"' % input_filename]
    command += ['-strict', '-2']
    command += ['-c:a', 'copy']
    command += ['-c:v', config('prores_encoder')]
    command += ['-profile:v', str(config('prores_profile'))]
    command += ['-qscale:v', str(config('prores_quality'))]

    if config('dimensions') != 'none':
        command += ['-s', config('dimensions')]

    command += ['-threads', 'none', '-hide_banner', '-y']
    # command += ['-progress', 'http://localhost:8000/bruce/'] ## cause web server error on POST
    command += ['-metadata comment="ORIGINAL: %s"' % (input_filename)]
    command += ['"%s.part.mov"' % output_filename]
    return ' '.join(command)

def get_bash_script(input_relative, output_relative):

    bash_string = [
        input_relative,
        output_relative
    ]

    return '\n'.join(bash_string)


def ignore_folder(path):
    global ignore_folders

    path = path.replace(config('dst'), '')
    path = pipe_path(path)
    path = re.sub('^\|+|\|+$', '', path.strip())
    paths = path.split('|')
    cat = '|'
    match = False
    for folder in paths:
        cat += folder + '|'
        if match == False and ignore_folders.has_key(cat):
            print "MATCHED INGORE: %s" % (cat)
            match = True
            msg = tsv("IGNORE", "Ignore base folder", path)
            if not errors.count(msg):
                errors.append(msg)
                append_to_log(msg)

    return match

def create_output_assets():

    global file_count
    global total_bytes
    global ignore_folders

    source = str(config('src'))
    destination = str(config('dst'))

    print "ignore_folders", ignore_folders

    for root, subdirs, files in os.walk(source):
        for file in files:

            # skip dot files (eg ._myVideoFile.MOV)
            if re.compile("^\.").match(file):
                continue

            file = re.sub('\r', '', file)
            print "FILE ::::", file

            input_filename = "%s%s%s" % (root, slash(), file)
            input_extension = re.search('([a-z0-9]+)$', input_filename, re.IGNORECASE).group(0)
            input_file_size = os.path.getsize(input_filename)

            base =  input_filename.replace(source, "")
            input_folder = base

            output_folder = ("%s%s" % (destination, base)).replace(file, '')
            output_extension = re.compile('mov', re.IGNORECASE).match(input_extension) and input_extension or 'mov'
            output_filename = output_folder + re.sub('([^\.]{2,})$', output_extension, file)

            base_folder = "%s" % (output_folder.replace(destination, ''))


            output_filename = folder_fix(output_filename)
            output_folder = folder_fix(output_folder)

            input_filename = folder_fix(input_filename)
            input_folder = folder_fix(input_folder)

            input_rel = input_filename.replace(source, "")
            output_rel = output_filename.replace(destination, "")

            # skip ignored folders
            if (ignore_folder(base_folder)):
                continue

            # skip non-video media
            if not is_video.match(file):
                continue

            # skip large files
            byte_limit = config('byte_limit')
            if (byte_limit > 0) and (input_file_size > byte_limit):
                msg = tsv("WARN", "Size limit exceeded", base + ' ' + sizeof_fmt(input_file_size), sizeof_fmt(byte_limit))
                errors.append(msg)
                append_to_log(msg)
                continue

            # skip existing transcoded files
            if skip_existing_files and os.path.isfile(output_filename):
                msg = tsv("SKIP", "Output media exists", output_filename)
                errors.append(msg)
                append_to_log(msg)
                continue

            # is this a transcode (ie input does not match output)
            if input_extension.lower() != output_extension.lower():
                if config('transcode') == 'none':
                    msg = tsv("SKIP", "Do not transcode", input_filename , "%s to %s" % (input_extension,output_extension))
                    errors.append(msg)
                    append_to_log(msg)
                    continue

                msg = tsv("TRANS", "Transcode media", input_filename , "%s to %s" % (input_extension,output_extension))
                errors.append(msg)
                append_to_log(msg)


            # create destination output folder(s)
            if not os.path.isdir(output_folder):
                # print "Create folder:", output_folder
                try:
                    os.makedirs(output_folder)
                except:
                    msg = tsv("ERROR", "Can't create folder", output_folder)
                    if not errors.count(msg):
                        errors.append(msg)
                        append_to_log(msg)
                    continue

            # create the ffmpeg command file, if the output media does not exist
            if os.path.isdir(output_folder) and not os.path.isfile(output_filename):
                # print "Create bash file: %s.ffmpeg" % (output_filename)
                try:
                    bash_file = open("%s.ffmpeg" % (output_filename), 'w')
                    bash_string = get_bash_script(input_rel, output_rel)
                    bash_file.write(bash_string)
                    bash_file.close()
                    file_count += 1
                    total_bytes += input_file_size
                    new_row = [bash_string, input_filename, output_filename]
                    print "ADDED", input_filename, len(stack)
                    stack.append(new_row)
                    append_to_log(tsv("ADDED", "Added media file", input_filename, sizeof_fmt(input_file_size)))
                except:
                    # errors.append("Can't create file (%s.ffmpeg)" % (output_filename))
                    msg = tsv("ERROR", "Can't create command file", "%s.ffmpeg" % (output_filename))
                    errors.append(msg)
                    append_to_log(msg)

    append_to_log(tsv("INFO", "File count", file_count))
    append_to_log(tsv("INFO", "Total bytes", sizeof_fmt(total_bytes)))

    config('total_files', file_count)
    config('total_bytes', total_bytes)
    update_progress(0)

    return


def append_to_log(text, filename=None):
    global log_file_name
    destination = config('dst')
    filename = get_prefix(filename or log_file_name)
    log_file = open("%s/%s" % (destination, filename), 'ab+')
    log_file.write(text+'\n')
    log_file.close()

def present_warnings():
    if len(errors):
        cls(3)
        print "-------------------------------------------"
        print " WARNINGS that occured while preparing"
        print "-------------------------------------------"
        print "\n - " + ('\n - '.join(errors))
        cls(3)
    return

def get_next_task():
    # returns a FFMPEG metadata file
    destination = str(config('dst'))
    work = []

    for root, subdirs, files in os.walk(destination):
        for file in files:
            filename = "%s%s%s" % (root, slash(), file)
            if ignore_folder(filename):
                continue

            if re.search('ffmpeg$', file):
                cls()
                work.append(filename)
                get_progress()
                break
        if len(work): break

    if len(work):
        return work[0]

    return None
def encode_type(ifp='', ofp=''):
    ext = re.compile('.*\.([0-9a-z]+)$', re.IGNORECASE)
    print "encode_type (%s) (%s)" % (re.match(ext, ifp).group(1), re.match(ext, ofp).group(1))
    ifp = re.match(ext, ifp).group(1) or ''
    ofp = re.match(ext, ofp).group(1) or ''
    return "%s to %s" % (ifp.upper(), ofp.upper())

def create_proxy_footage():
    global which_ffmpeg

    src = config('src')
    dst =  config('dst')
    task_filename = get_next_task()

    append_to_log(tsv('WORKER', 'Worker joined ... ', config('worker_addr')))
    while task_filename:

        base_filename = re.sub('.ffmpeg$', '', task_filename)
        base_filename = re.sub(dst, '', base_filename)

        src_filename = src + base_filename
        dst_filename = dst + base_filename

        print "%s: (%s) %s" % (config('worker'), config('worker_addr'), task_filename)

        try:
            os.rename(task_filename, task_filename+'.locked')
        except:
            print "File exists %s %s" % (task_filename, task_filename+'.locked')
            task_filename = get_next_task()


        cls(3)
        work_time = now('time')
        work_worker = config('worker')

        # open the task file and extract src, dest and
        # add create the relative paths for the batch command
        task_file = open(task_filename+'.locked', 'r').read()
        open(task_filename+'.locked', 'w').write(task_file + '\n' + config('worker') +  ':' + config('worker_addr'))
        task_file = task_file.split('\n')

        abs_input = folder_fix(src + slash() + task_file[0])
        abs_output = folder_fix(dst + slash() + task_file[1])
        input_size = os.path.getsize(abs_input)

        media_encode = encode_type(abs_input, abs_output)
        task_transcode = '' if (task_file[0].lower() == task_file[1].lower) else ' TRANSCODE '
        task_cmd =  get_ffmpeg_command(abs_input, abs_output)

        # print "Executing %d of %d (%d%%)\n\n" % (i, n, int((float(i-1)/float(n)) * 100))
        append_to_log(tsv('WORK', 'Start transcoding', task_filename, "%s (%s)" % (sizeof_fmt(input_size), media_encode)))

        subprocess.call(task_cmd, shell=True)
        work_time = now('time')


        # clean-up: rename temp file
        if os.path.isfile(abs_output + '.part.mov'):
            os.rename(abs_output + '.part.mov', abs_output)
            output_size = os.path.getsize(abs_output)
            ratio = float(output_size)/float(input_size)
            report = 'DEFALTE' if ratio else 'INFLATE'
            append_to_log(tsv('WORK', 'Finished transcoding', task_filename, "%s %s %2.2f" % (sizeof_fmt(output_size), report, ratio)))
            update_progress()
            status = 'SUCCESS'
            snooze = 5

            # delete ffmpeg command file IF transcode was successful
            if os.path.isfile(abs_output +'.ffmpeg.locked'):
                os.remove(abs_output + '.ffmpeg.locked')

        else:
            msg = tsv("FAIL", "Failed to create output media", abs_output)
            status = 'ERROR'
            append_to_log(msg)
            print msg
            snooze = 15

        # loop to next file ... or exit
        # print "finished .. zzzzzzz"
        # time.sleep(20)
        print "\n\n%s: Safe to quit. Snoozing for %s seconds" % (status, snooze)
        time.sleep(snooze)
        task_filename = get_next_task()

    append_to_log(tsv('WORKER', 'Worker left ... all done', config('worker'), now()))
    cls()

def pipe_path(path):
    path = path.strip()
    return re.sub('[\\\/]', '|', path)

def strip_trailing_slash(path=''):
    if not path: return ''
    return re.sub('[\\\/]+$', '', path)

def get_ignored_folders():
    global ignore_file_name
    folder = str(config('dst'))
    file_name = "%s%s%s" % (folder, slash(), get_prefix(ignore_file_name))
    lines = {}
    try:
        file = open(file_name, 'r')
        append_to_log(tsv("INFO", "Ignore file found"))

    except:
        append_to_log(tsv("INFO", "Nothing to ignore"))
        return lines

    # return array of folders to ignore
    for line in file:
        clean_path = pipe_path(line)
        lines[clean_path] = True

    return lines

def config(key, value=None):
    global config_dct
    # returns config value
    if value != None:
        config_dct[key] = value

    value = config_dct[key]

    if type(value) is unicode:
        value = value.encode('ascii')

    return value


def update_progress(value=1):
    # update config dictionary
    # open existing config
    global destination
    global config_filename

    config_path = "%s%s%s" % (destination, slash(), config_filename)
    config_json = json.loads(open(config_path, 'r').read())

    total_progress = config_json['total_progress']
    total_progress += int(value) or 0
    config('total_progress', total_progress)

    config_json['total_progress'] = total_progress
    config_json['total_files'] = config('total_files')
    config_json['total_bytes'] = config('total_bytes')
    config_json['node_'+config('worker')] = config('worker_addr') + '@' + now('epoc')


    config_file = open(config_path, 'w')
    config_file.write(json.dumps(config_json, indent=4))
    config_file.close()

def get_progress(summary=False):
    diff = (float(config('total_progress')) / float(config('total_files')))* 100
    cls(1)
    print "%s  %2.1f%% (%sof%s)" % (('|'*int(diff)).ljust(int(diff)).ljust(100, ':'), diff,config('total_progress'), config('total_files'))


def get_input(msg='User input message', typeis='string', values=[], read_only=False):
    input_msg = (msg.ljust(60, '.') + '(%s): ') % (values[0])
    if read_only == True:
        print "%s" % input_msg
        return values[0]

    input_value = str(raw_input(input_msg or ''))
    def get_string(val):
        if input_value == '': return str(values[0])
        if input_value in values: return input_value
        print "Invalid option. (\"%s\")" % ('", "'.join(values))
        return get_input(msg, typeis, values)

    def get_number(val):
        if input_value == '': return values[0]
        temp_value = int(input_value) or -1
        if temp_value >= values[1] and temp_value <= values[2]: return int(temp_value)
        print "Invalid option. min: %s max: %s" % (values[1], values[2])
        return get_input(msg, typeis, values)

    def get_resize(val):
        if input_value == '': return values[0]
        temp_value = str(input_value)
        if re.compile('^[0-9]{2,4}x[0-9]{2,4}$').match(temp_value): return str(temp_value)
        if re.compile('^no.*$').match(temp_value): return 'none'
        print "Invalid option. \"no\" or (WIDTH)x(HEIGHT) eg: %s" % (values[1:])
        return get_input(msg, typeis, values)

    def get_array(val):
        if input_value == '': return values[0]
        temp_value = str(input_value).lower().strip()
        if re.compile('^(no|none)$').match(temp_value): return 'none'
        if re.compile('^(all)$').match(temp_value): return 'all'
        # TODO: validate know video extensions
        return str(temp_value)

    switch = {
        'string': get_string,
        'number': get_number,
        'dimension': get_resize,
        'array': get_array,
    }

    return switch[typeis](input_value)

def get_prefix(filename=''):
    prefix = ".mkproxy"
    return "%s%s%s" % (prefix, slash(), filename)

if __name__ == "__main__":

    cls()


    parser = argparse.ArgumentParser()
    parser.add_argument("-i", type=str, help="(String) Source folder to scan for video assets")
    parser.add_argument("-o", type=str, help="(String) Destination folder for the transcoded media")
    parser.add_argument("-d", action="store_true", help="Delete and re-create the config file.")
    parser.add_argument("-n", type=str, help="Name the worker, used in the event log")
    parser.add_argument("-w", action="store_true", help="Create a webserver monitor")

    args = parser.parse_args()

    cwd = os.getcwd()
    source = args.i or None
    destination = args.o or None
    worker_id = args.n or str("worker_" + now('filename'))
    worker_addr = socket.gethostbyname(socket.gethostname())
    delete_config_file = args.d
    create_web_assets = args.w

    # global variables
    # the most common video extensions to match and convert
    is_video = re.compile('.*(mp4|mov|qt|avi|wmv|m4v|mpeg|3gp|mxf|mkv)$', re.IGNORECASE)
    which_ffmpeg = find_executable("ffmpeg")
    gigabyte = 1024.0**3.0
    stack = [] # the FFMPEG execution stack
    errors = [] # the collated runtime errors
    info = [] # the information feedback log file
    file_count = 0
    total_bytes = 0
    skip_existing_files = True
    create_ffmpeg_files = False
    ignore_file_name = get_prefix("ignore.txt")
    config_filename = get_prefix("config.json")
    config_dct = {
        "src": source,
        "dst": destination,
        "prores_encoder": 'prores_ks',  # 'prores' 'prores_ks' (supports 4444) 'prores_aw'
        "prores_profile": "0", # 0:Proxy, 1:LT, 2:SQ and 3:HQ
        "prores_quality": "22", # huge file: [0 |||||| 9-13 |||||||| 32] terrible quality
        "dimensions": '1920x1080',
        "gig_limit": 20,
        "byte_limit": None,
        "total_files": 0,
        "total_bytes": 0.0,
        "transcode": 'all',
        "total_progress": 0,
        "worker": worker_id,
        "worker_addr": worker_addr,
        "log_filename": "event_log_%s.csv" % (now('filename')),
        "date_created": now(),
        "version": version(),
    }

    # always check the src & dst volumes exist
    while source == None or not os.path.isdir(source):
        print "Source folder does not exist!"
        source = raw_input("Source folder(%s): " % (source)) or source
        source = strip_trailing_slash(source)


    while destination == None or source == destination or not os.path.isdir(destination):
        print "Desintation folder does not exist!"
        new_dest = raw_input("Desitination folder(%s): " % (destination)) or destination
        new_dest = strip_trailing_slash(new_dest)

        if source == new_dest:
            print "Desintation folder must be different to Source folder!"
            print "Source: %s" % source
            continue

        destination = new_dest

    # resolve relative paths to absolute paths
    if not re.search('^/', source):
        source = os.path.realpath(source)

    if not re.search('^/', destination):
        destination = os.path.realpath(destination)


    cls(3)
    print "Source folder: %s" % config('src')
    print "Destination folder: %s" % config('dst')

    log_file_name = config('log_filename')
    config_path = "%s%s%s" % (destination, slash(), config_filename)
    config_exists = os.path.isfile(config_path)


    if delete_config_file:
        config_exists = False

    # generate web monitor assets
    # requires the destination path and .mkproxy folder
    if config_exists and create_web_assets:
        create_assets(destination)
        sys.exit(0)

    if config_exists:
        config_dct.update(json.loads(open(config_path, 'r').read()))

        # update local references
        config('src', source)
        config('dst', destination)
        config('worker', worker_id)
        config('worker_addr', worker_addr)

        print "Config exists. Participate as worker thread \"%s\" (%s)" % (config('worker'), config('worker_addr'))

        # confirm rel path to src and dst
        log_file_name = config('log_filename')

    cls(2)
    print "Collect FFMPEG prores settings:"
    config('prores_encoder', get_input('Which prores encoder', 'string', ['prores_ks', 'prores', 'prores_aw'], config_exists))
    config('prores_profile', get_input('Which prores profile -- 0:Proxy, 1:LT, 2:SQ and 3:HQ', 'string', ['0', '1', '2', '3'], config_exists))
    config('prores_quality', get_input('Quality -- 0:high to 32:low', 'number', [15, 0, 32], config_exists))
    config('transcode', get_input('Transcode -- \"all\", \"no\" OR list', 'array', ['all', 'none'], config_exists))
    config('dimensions', get_input('Resize -- \"no\" OR (WIDTH)x(HEIGHT)', 'dimension', ['1920x1080', '1280x720', '1920x1080', '2560x1440', '3840x2160', '7680x4320'], config_exists))
    config('gig_limit', get_input('Skip large files -- 0 = No Gig limit', 'number', [20, 0, 999], config_exists))
    config('byte_limit', int(float(config('gig_limit'))*gigabyte))



    # sys.exit(0)


    if not config_exists:

        # create a config file for slave nodes
        cls(2)
        asset_folder = config_path.replace("config.json", '')
        print "Create NEW config file:\n", get_prefix(config_path)
        # create the asset folder
        if not os.path.isdir(asset_folder):
            print "Create folder:", asset_folder
            try:
                os.makedirs(asset_folder)
            except:
                msg = tsv("ERROR", "Can't asset folder", asset_folder)
                if not errors.count(msg):
                    errors.append(msg)
                    append_to_log(msg)
                sys.exit(0)


        # config_path = "%s%s%s" % (destination, slash(), get_prefix(config_filename))

        config_file = open(config_path, 'w')
        config_file.write(json.dumps(config_dct, indent=4))
        config_file.close()

        create_ffmpeg_files = True
        append_to_log(tsv("TYPE", "DESCRIPTION", "VALUE", "COMMENT"))
        append_to_log(tsv("INFO", "input", source))
        append_to_log(tsv("INFO", "output", destination))
        append_to_log(tsv("INFO", "encoder", config('prores_encoder')))
        append_to_log(tsv("INFO", "profile", config('prores_profile')))
        append_to_log(tsv("INFO", "quality", config('prores_quality')))
        append_to_log(tsv("INFO", "dimensions", config('dimensions')))
        append_to_log(tsv("INFO", "size limit", config('byte_limit'), sizeof_fmt(config('byte_limit'))))


    ignore_folders = get_ignored_folders()

    if create_ffmpeg_files:
        create_output_assets()
        present_warnings()
        if len(stack):
            cls(2)
            print "There are %d items ready to transcode." % (len(stack))
            if raw_input("Do you want to continue: (y/N) ") != 'y':
                sys.exit(0)

    create_proxy_footage()

