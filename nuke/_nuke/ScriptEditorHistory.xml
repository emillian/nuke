<?xml version="1.0" encoding="UTF-8"?><script>import nuke
import os, random

def zindex(x, y):

    # THIS IS WIP. IT CRASHES NUKE BEWARE!!!!
    # ---------------------------------------

    # depthMap = nuke.toNode('zDepthMap')
    # z = nuke.sample(depthMap, 'a', x, y)

    # # print depthMap
    # print &quot;zindex x:(%d) a:(%d) (z:%d)&quot; % (x, y, z)

    z = 1
    return z

def translateCard(uuid, x, y):
    card = nuke.toNode(uuid)
    z = zindex(x, y)
    card[&quot;translate&quot;].setValue(z, 2)
    # return z

def createCard(grid, filename, col, row, ii):
    # unquie node name

    name = filename.split(&quot;/&quot;)[-1].split(&quot;.&quot;)[0]
    uuid = &quot;%s_%s&quot; % (name, ii)

    xx = (col - 1) * 1.05
    yy = -(row - 1) * 0.75
    zz = zindex(col, row)

    print &quot;%s %s %s&quot; % (xx, yy, zz)

    # node graph icon positioning
    xcoord = (500 + (xx * 200))
    ycoord = (100 + (yy * 150))

    tile = nuke.nodes.Read(file=filename, xpos=xcoord, ypos=ycoord)

    # create the 3D card
    card = nuke.nodes.Card(name=uuid, xpos=xcoord, ypos=ycoord + 60)

    # card[&quot;translate&quot;].setValue([xx, yy, zz])
    # expression = &quot;%d, %d, [python translateCard('%s', %d, %d)]&quot; % (col, row, uuid, col, row)
    expression = &quot;[python translateCard('%s', %d, %d)]&quot; % (uuid, col, row)
    print &quot;EXPRESSION: %s&quot; % (expression)


    # nuke.selectedNode()['translate'].setExpression(&quot;[python nuke.sample(nuke.toNode('NoOp1'),&quot;r&quot;, 480, 270]&quot;, 2)

    # card[&quot;translate&quot;].setValue([xx, yy, zz])
    card['translate'].setValue(xx, 0)
    card['translate'].setValue(yy, 1)
    card['translate'].setExpression(expression, 2)
    # card[&quot;translate&quot;].setExpression(expression)
    card.setInput(0, tile)

    # connect card + JPG to the scene node
    grid.setInput(ii, card)


def renderMosaic():

    # cwd = os.getcwd() ## Nuke defaults to &quot;/&quot;
    cwd = &quot;/Volumes/calcium/disintegrate/999-mosaic/large/&quot;
    files = os.listdir(cwd)

    # Create the host Scene node

    scene = nuke.nodes.Scene(name=&quot;mosaic&quot;, xpos=250, ypos=40)

    camera = nuke.nodes.Camera(name=&quot;cameraera&quot;, xpos=100, ypos=40, focal=15)
    camera[&quot;translate&quot;].setValue([8, -5, 12])


    render = nuke.nodes.ScanlineRender(name=&quot;ScanLineRender&quot;, xpos=250, ypos=140, cached=True)
    render.setInput(1, scene)
    render.setInput(2, camera)


    blur = nuke.nodes.Blur(name=&quot;Blur1&quot;, xpos=250, ypos=180)
    blur.setInput(0, render)


    view = nuke.nodes.Viewer(name=&quot;Viewer1&quot;, xpos=250, ypos=320)
    view.setInput(0, blur)




    col_max = 16
    row_max = 16

    col = 0
    row = 0
    n = 0
    lat = 0
    lon = 0
    width = 1000
    height = 500
    margin = 20

    # iterate over the image collection
    for file in files:
        if not file.endswith(&quot;jpg&quot;):
            continue


        col = (n % row_max) + 1
        n += 1

        if col == 1:
            row += 1

        # lat = (col - 1) * 1.05
        # lon = -(row - 1) * 0.75

        # print (&quot;- %s %s col:%s row:%s -- x:%s y:%s&quot; % (file, n, col, row, lat, lon))

        if n &gt; (row_max * col_max):
            continue

        createCard(scene, cwd + file, col, row, n)




renderMosaic()
</script><script>import nuke
import os, random

def zindex(x, y):

    # THIS IS WIP. IT CRASHES NUKE BEWARE!!!!
    # ---------------------------------------

    # depthMap = nuke.toNode('zDepthMap')
    # z = nuke.sample(depthMap, 'a', x, y)

    # # print depthMap
    # print &quot;zindex x:(%d) a:(%d) (z:%d)&quot; % (x, y, z)

    z = 1
    return z

def translateCard(uuid, x, y):
    card = nuke.toNode(uuid)
    z = zindex(x, y)
    card[&quot;translate&quot;].setValue(z, 2)
    # return z

def createCard(grid, filename, col, row, ii):
    # unquie node name

    name = filename.split(&quot;/&quot;)[-1].split(&quot;.&quot;)[0]
    uuid = &quot;%s_%s&quot; % (name, ii)

    xx = (col - 1) * 1.05
    yy = -(row - 1) * 0.75
    zz = zindex(col, row)

    print &quot;%s %s %s&quot; % (xx, yy, zz)

    # node graph icon positioning
    xcoord = (500 + (xx * 200))
    ycoord = (100 + (yy * 150))

    tile = nuke.nodes.Read(file=filename, xpos=xcoord, ypos=ycoord)

    # create the 3D card
    card = nuke.nodes.Card(name=uuid, xpos=xcoord, ypos=ycoord + 60)

    # card[&quot;translate&quot;].setValue([xx, yy, zz])
    # expression = &quot;%d, %d, [python translateCard('%s', %d, %d)]&quot; % (col, row, uuid, col, row)
    expression = &quot;[python translateCard('%s', %d, %d)]&quot; % (uuid, col, row)
    print &quot;EXPRESSION: %s&quot; % (expression)


    # nuke.selectedNode()['translate'].setExpression(&quot;[python nuke.sample(nuke.toNode('NoOp1'),&quot;r&quot;, 480, 270]&quot;, 2)

    # card[&quot;translate&quot;].setValue([xx, yy, zz])
    card['translate'].setValue(xx, 0)
    card['translate'].setValue(yy, 1)
    card['translate'].setExpression(expression, 2)
    # card[&quot;translate&quot;].setExpression(expression)
    card.setInput(0, tile)

    # connect card + JPG to the scene node
    grid.setInput(ii, card)


def renderMosaic():

    # cwd = os.getcwd() ## Nuke defaults to &quot;/&quot;
    cwd = &quot;/Volumes/calcium/disintegrate/999-mosaic/large/&quot;
    files = os.listdir(cwd)

    # Create the host Scene node

    scene = nuke.nodes.Scene(name=&quot;mosaic&quot;, xpos=250, ypos=40)

    camera = nuke.nodes.Camera(name=&quot;cameraera&quot;, xpos=100, ypos=40, focal=15)
    camera[&quot;translate&quot;].setValue([8, -5, 12])


    render = nuke.nodes.ScanlineRender(name=&quot;ScanLineRender&quot;, xpos=250, ypos=140, cached=True)
    render.setInput(1, scene)
    render.setInput(2, camera)


    blur = nuke.nodes.Blur(name=&quot;Blur1&quot;, xpos=250, ypos=180)
    blur.setInput(0, render)


    view = nuke.nodes.Viewer(name=&quot;Viewer1&quot;, xpos=250, ypos=320)
    view.setInput(0, blur)




    col_max = 16
    row_max = 16

    col = 0
    row = 0
    n = 0
    lat = 0
    lon = 0
    width = 1000
    height = 500
    margin = 20

    # iterate over the image collection
    for file in files:
        if not file.endswith(&quot;jpg&quot;):
            continue


        col = (n % row_max) + 1
        n += 1

        if col == 1:
            row += 1

        # lat = (col - 1) * 1.05
        # lon = -(row - 1) * 0.75

        # print (&quot;- %s %s col:%s row:%s -- x:%s y:%s&quot; % (file, n, col, row, lat, lon))

        if n &gt; (row_max * col_max):
            continue

        createCard(scene, cwd + file, col, row, n)




renderMosaic()
</script><script>import nuke
import os, random

def zindex(x, y):

    # THIS IS WIP. IT CRASHES NUKE BEWARE!!!!
    # ---------------------------------------

    # depthMap = nuke.toNode('zDepthMap')
    # z = nuke.sample(depthMap, 'a', x, y)

    # # print depthMap
    # print &quot;zindex x:(%d) a:(%d) (z:%d)&quot; % (x, y, z)

    z = 1
    return z

def translateCard(uuid, x, y):
    card = nuke.toNode(uuid)
    z = zindex(x, y)
    card[&quot;translate&quot;].setValue(z, 2)
    # return z

def createCard(grid, filename, col, row, ii):
    # unquie node name

    name = filename.split(&quot;/&quot;)[-1].split(&quot;.&quot;)[0]
    uuid = &quot;%s_%s&quot; % (name, ii)

    xx = (col - 1) * 1.05
    yy = -(row - 1) * 0.75
    zz = zindex(col, row)

    print &quot;%s %s %s&quot; % (xx, yy, zz)

    # node graph icon positioning
    xcoord = (500 + (xx * 200))
    ycoord = (100 + (yy * 150))

    tile = nuke.nodes.Read(file=filename, xpos=xcoord, ypos=ycoord)

    # create the 3D card
    card = nuke.nodes.Card(name=uuid, xpos=xcoord, ypos=ycoord + 60)

    # card[&quot;translate&quot;].setValue([xx, yy, zz])
    # expression = &quot;%d, %d, [python translateCard('%s', %d, %d)]&quot; % (col, row, uuid, col, row)
    expression = &quot;[python translateCard('%s', %d, %d)]&quot; % (uuid, col, row)
    print &quot;EXPRESSION: %s&quot; % (expression)


    # nuke.selectedNode()['translate'].setExpression(&quot;[python nuke.sample(nuke.toNode('NoOp1'),&quot;r&quot;, 480, 270]&quot;, 2)

    # card[&quot;translate&quot;].setValue([xx, yy, zz])
    card['translate'].setValue(xx, 0)
    card['translate'].setValue(yy, 1)
    card['translate'].setExpression(expression, 2)
    # card[&quot;translate&quot;].setExpression(expression)
    card.setInput(0, tile)

    # connect card + JPG to the scene node
    grid.setInput(ii, card)


def renderMosaic():

    # cwd = os.getcwd() ## Nuke defaults to &quot;/&quot;
    cwd = &quot;/Volumes/calcium/disintegrate/999-mosaic/large/&quot;
    files = os.listdir(cwd)

    # Create the host Scene node

    scene = nuke.nodes.Scene(name=&quot;mosaic&quot;, xpos=250, ypos=40)

    camera = nuke.nodes.Camera(name=&quot;cameraera&quot;, xpos=100, ypos=40, focal=15)
    camera[&quot;translate&quot;].setValue([8, -5, 12])


    render = nuke.nodes.ScanlineRender(name=&quot;ScanLineRender&quot;, xpos=250, ypos=140, cached=True)
    render.setInput(1, scene)
    render.setInput(2, camera)


    blur = nuke.nodes.Blur(name=&quot;Blur1&quot;, xpos=250, ypos=180)
    blur.setInput(0, render)


    view = nuke.nodes.Viewer(name=&quot;Viewer1&quot;, xpos=250, ypos=320)
    view.setInput(0, blur)




    col_max = 16
    row_max = 16

    col = 0
    row = 0
    n = 0
    lat = 0
    lon = 0
    width = 1000
    height = 500
    margin = 20

    # iterate over the image collection
    for file in files:
        if not file.endswith(&quot;jpg&quot;):
            continue


        col = (n % row_max) + 1
        n += 1

        if col == 1:
            row += 1

        # lat = (col - 1) * 1.05
        # lon = -(row - 1) * 0.75

        # print (&quot;- %s %s col:%s row:%s -- x:%s y:%s&quot; % (file, n, col, row, lat, lon))

        if n &gt; (row_max * col_max):
            continue

        createCard(scene, cwd + file, col, row, n)




renderMosaic()

</script><script>import nuke
import os, random

def zindex(x, y):

    # THIS IS WIP. IT CRASHES NUKE BEWARE!!!!
    # ---------------------------------------

    # depthMap = nuke.toNode('zDepthMap')
    # z = nuke.sample(depthMap, 'a', x, y)

    # # print depthMap
    # print &quot;zindex x:(%d) a:(%d) (z:%d)&quot; % (x, y, z)

    z = 1
    return z

def translateCard(uuid, x, y):
    card = nuke.toNode(uuid)
    z = zindex(x, y)
    card[&quot;translate&quot;].setValue(z, 2)
    # return z

def createCard(grid, filename, col, row, ii):
    # unquie node name

    name = filename.split(&quot;/&quot;)[-1].split(&quot;.&quot;)[0]
    uuid = &quot;%s_%s&quot; % (name, ii)

    xx = (col - 1) * 1.05
    yy = -(row - 1) * 0.75
    zz = zindex(col, row)

    print &quot;%s %s %s&quot; % (xx, yy, zz)

    # node graph icon positioning
    xcoord = (500 + (xx * 200))
    ycoord = (100 + (yy * 150))

    tile = nuke.nodes.Read(file=filename, xpos=xcoord, ypos=ycoord)

    # create the 3D card
    card = nuke.nodes.Card(name=uuid, xpos=xcoord, ypos=ycoord + 60)

    # card[&quot;translate&quot;].setValue([xx, yy, zz])
    # expression = &quot;%d, %d, [python translateCard('%s', %d, %d)]&quot; % (col, row, uuid, col, row)
    expression = &quot;[python translateCard('%s', %d, %d)]&quot; % (uuid, col, row)
    print &quot;EXPRESSION: %s&quot; % (expression)


    # nuke.selectedNode()['translate'].setExpression(&quot;[python nuke.sample(nuke.toNode('NoOp1'),&quot;r&quot;, 480, 270]&quot;, 2)

    # card[&quot;translate&quot;].setValue([xx, yy, zz])
    card['translate'].setValue(xx, 0)
    card['translate'].setValue(yy, 1)
    card['translate'].setExpression(expression, 2)
    # card[&quot;translate&quot;].setExpression(expression)
    card.setInput(0, tile)

    # connect card + JPG to the scene node
    grid.setInput(ii, card)


def renderMosaic():

    # cwd = os.getcwd() ## Nuke defaults to &quot;/&quot;
    cwd = &quot;/Volumes/calcium/disintegrate/999-mosaic/large/&quot;
    files = os.listdir(cwd)

    # Create the host Scene node

    scene = nuke.nodes.Scene(name=&quot;mosaic&quot;, xpos=250, ypos=40)

    camera = nuke.nodes.Camera(name=&quot;cameraera&quot;, xpos=100, ypos=40, focal=15)
    camera[&quot;translate&quot;].setValue([8, -5, 12])


    render = nuke.nodes.ScanlineRender(name=&quot;ScanLineRender&quot;, xpos=250, ypos=140, cached=True)
    render.setInput(1, scene)
    render.setInput(2, camera)


    blur = nuke.nodes.Blur(name=&quot;Blur1&quot;, xpos=250, ypos=180)
    blur.setInput(0, render)


    view = nuke.nodes.Viewer(name=&quot;Viewer1&quot;, xpos=250, ypos=320)
    view.setInput(0, blur)




    col_max = 16
    row_max = 16

    col = 0
    row = 0
    n = 0
    lat = 0
    lon = 0
    width = 1000
    height = 500
    margin = 20

    # iterate over the image collection
    for file in files:
        if not file.endswith(&quot;jpg&quot;):
            continue


        col = (n % row_max) + 1
        n += 1

        if col == 1:
            row += 1

        # lat = (col - 1) * 1.05
        # lon = -(row - 1) * 0.75

        # print (&quot;- %s %s col:%s row:%s -- x:%s y:%s&quot; % (file, n, col, row, lat, lon))

        if n &gt; (row_max * col_max):
            continue

        createCard(scene, cwd + file, col, row, n)




renderMosaic()

</script>
